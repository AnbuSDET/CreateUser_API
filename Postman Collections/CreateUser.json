{
	"info": {
		"_postman_id": "f27c6573-7e8f-41f0-8bfd-7774ec3119e1",
		"name": "CREATE_USER",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "CREATE_USER",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "3409131d-8578-40b6-a602-bf89c8e70e54",
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "c35718a5-51dc-449f-9c1a-29799e7ed47d",
						"exec": [
							"\r",
							"const result = JSON.parse(responseBody) \r",
							"var status = pm.response.status;\r",
							"\r",
							"pm.test(\"Validate CreateUser \", () => {\r",
							"    const expectedStatusCode = pm.iterationData.get(\"Exp_statusCode\");\r",
							"  pm.expect(pm.response.code).to.be.eql(expectedStatusCode); \r",
							"\r",
							"});\r",
							"  \r",
							"  pm.expect(result.user_first_name).to.eql(pm.iterationData.get(\"First_Name\"));  \r",
							"  pm.collectionVariables.set(\"FIRST_NAME\", result.user_first_name);\r",
							"  pm.collectionVariables.set(\"USER_ID\",result.user_id);\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "89a2bd5a-0456-4fcf-8327-a43e97c1e4fa",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\"user_first_name\":  \"{{First_Name}}\",\r\n \"user_last_name\":  \"{{Last_Name}}\"  ,       \r\n \"user_contact_number\": {{Contact_Number}} ,\r\n \"user_email_id\": \"{{Email_Id}}\",\r\n\"userAddress\": {   \r\n    \"plotNumber\" :\"{{Plot_Number}}\",\r\n   \"street\": \"{{Street}}\",\r\n   \"state\": \"{{State}}\",\r\n    \"country\": \"{{Country}} \",\r\n   \"zipCode\": {{ZipCode}} \r\n }\r\n}\r\n\r\n\r\n\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{BaseURL}}{{Create_User_Endpoint}}"
			},
			"response": []
		},
		{
			"name": "GETALLUSERS",
			"id": "ec05257c-b3a5-4bdf-a2f2-30d966f5da0a",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": "{{BaseURL}}{{Get_AllUsers}}"
			},
			"response": []
		},
		{
			"name": "GETUSER",
			"id": "7fe85bc2-a107-4b30-b40a-4442fe1b29c9",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": "{{BaseURL}}{{GetId_Endpoint}}{{userId}}"
			},
			"response": []
		}
	],
	"auth": {
		"type": "basic",
		"basic": {
			"password": "userapi@october",
			"username": "Numpy@gmail.com"
		}
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "7ceb87b7-be8a-46c9-b786-d92d1a2a3017",
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"// Load data from the iteration or external source\r",
					"if (typeof pm.variables.get('requestsData') !== 'object') {\r",
					"    pm.variables.set('requestsData', pm.iterationData.toObject());\r",
					"}\r",
					"console.log('requestsData:', requestsData); \r",
					"const requestsData = pm.variables.get('requestsData');\r",
					"\r",
					"// Check if requestsData is valid\r",
					"if (typeof requestsData !== 'object' || Object.keys(requestsData).length === 0) {\r",
					"    console.log('No external data provided or object is empty.');\r",
					"    return; // Exit if there's no data\r",
					"}\r",
					"\r",
					"// Find the current request based on the request name\r",
					"const currentRequest = requestsData.requests.find(({ name }) => name === pm.info.requestName);\r",
					"\r",
					"// Skip the rest if there's no matching currentRequest\r",
					"if (!currentRequest) {\r",
					"    console.log('Current request not found in requestsData.');\r",
					"    return; // Exit if no matching request is found\r",
					"}\r",
					"\r",
					"// Expose variables for the current request\r",
					"const variables = currentRequest.data.shift(); // Get the first data object\r",
					"\r",
					"for (const [key, value] of Object.entries(variables)) {\r",
					"    pm.variables.set(key, value); // Set each variable in Postman\r",
					"}\r",
					"\r",
					"// Validate the response based on the expected status code\r",
					"const expectedStatusCode = variables.Exp_statusCode;\r",
					"pm.test(`Expected status code is ${expectedStatusCode}`, function () {\r",
					"    pm.response.to.have.status(expectedStatusCode);\r",
					"});\r",
					"\r",
					"// Decide where to go next\r",
					"if (currentRequest.data.length > 0) {\r",
					"    pm.execution.setNextRequest(pm.info.requestName); // Keep processing the same request\r",
					"} else  {   // If there are no more data, decide what to do next\r",
					"   \r",
					"        pm.execution.setNextRequest(\"GETUSER\"); // Move to GETUSER if CREATE_USER is done\r",
					"     \r",
					"    \r",
					"}\r",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "c97b7da1-2077-4e02-ba77-ea145b8ff73f",
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "BaseURL",
			"value": "https://userserviceapp-f5a54828541b.herokuapp.com/uap",
			"type": "string"
		},
		{
			"key": "FIRST_NAME",
			"value": ""
		},
		{
			"key": "USER_ID",
			"value": ""
		}
	]
}